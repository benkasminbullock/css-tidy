[% start_year=2021 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/CSS-Tidy-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

[% info.colon %] - reformat CSS

=head1 SYNOPSIS

    use CSS::Tidy 'tidy_css';
    my $output = tidy_css ($input);

=head1 VERSION

This documents version [% info.version %] of [% info.name %]
corresponding to L<git commit [% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

This reformats CSS.

The idea is to have a formatting script which can be used to
consistently format CSS.

=head1 FUNCTIONS

=head2 tidy_css

    my $output = tidy_css ($input);

Given CSS in C<$input>, reformat it into a consistent format and
return the value.

=head1 TRANSFORMATIONS APPLIED

=over

=item Indentation

Indentation is changed to multiples of four spaces.

=item Trailing whitespace

Trailing whitespace (blanks after the end of the line) is removed.

=item Property/value pairs

The spacing between property/value pairs such as

    font-size:21em;

is altered to put a single space after the colon:

    font-size: 21em;

=item Declaration blocks

A blank line is inserted between declaration blocks.

=item Single-line braces are expanded out

    .something { something:something; }

is expanded to

    .something {
        something: something;
    }

=item Comments have a blank line before and after

If the comment is on a line by itself, it will be given one blank line
before and after itself.

=back

=head1 SCRIPT

The script L<csstidy> runs L</tidy_css> on STDIN and prints the result
to STDOUT. There is also F<css-tidy.el> in the distribution which
enables one to run L<csstidy> on the current buffer.

=head1 SEE ALSO

[% PROCESS 'cpm.pod' %]

=head2 About CSS

=over

=item CSS Specification

L<CSS Syntax Module Level 3|https://www.w3.org/TR/css-syntax-3/> at
the W3 Consortium.

=back

=head2 Other CPAN modules

=head3 Parsers

=over

[% cpm('CSS') %]

[% cpm('CSS::Croco') %]

[% cpm('CSS::DOM') %]

[% cpm('CSS::Object') %]

[% cpm('CSS::SAC') %]

ðŸ‘Ž This seems to be unusable, it fails on the CSS stylesheets we've
tried it on.

[% cpm('CSS::Simple') %]

[% cpm('CSS::Struct') %]

It doesn't have very much documentation. See
L<https://github.com/michal-josef-spacek/CSS-Struct/issues/2>.

[% cpm('CSS::Tiny') %]

=back

=head3 Preprocessors

=over

[% cpm('CSS::LESS') %]

[% cpm('CSS::Sass') %]

Unfortunately this is built on top of a deprecated library which is
being replaced with Dart Sass.

=back

=head3 Minifiers

=over

[% cpm('CSS::Compressor') %]

[% cpm('CSS::Minifier') %]

[% cpm('CSS::Minifier::XS') %]

[% cpm('CSS::Packer') %]

[% cpm('CSS::Squish') %]

=back

=head3 Other

=over

[% cpm('CSS::Coverage') %]

ðŸ‘Ž Test whether your styles are actually in use or not. Unfortunately
it depends on L</CSS::SAC> which seems to be unusable.

[% cpm('CSS::Inliner') %]

[% cpm('Test::CSS') %]

Test CSS files or strings using regular expressions and a list of
properties. The properties list is somewhat out of date, for example
it doesn't have the C<touch-action> property. See
L<https://github.com/manwar/Test-CSS/issues/2>.

=back

[% INCLUDE "author" %]
